[{"authors":["admin"],"categories":null,"content":"I am a Master's student in the Computer Science department at University of California, San Diego. My interests include Distributed Systems, Machine Learning and the intersection of the two. I was a Software Developer in the Adobe Media Optimizer team at Adobe where I built a streaming architeture for search advertising attribution. I graduated from IIT Kanpur in 2017 with a major in Computer Science and Engineering. In the summer of 2016, I interned at Adobe BigData Experience Lab where I worked on integrating a Topic Model based prediction system within Adobe Illustrator.\nMy hobbies include reading and playing all kinds of sports - Badminton, TT, Tennis, Squash, Basketball. I was a member of the Badminton team at IIT Kanpur and won several tournaments for the institute.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a Master's student in the Computer Science department at University of California, San Diego. My interests include Distributed Systems, Machine Learning and the intersection of the two. I was a Software Developer in the Adobe Media Optimizer team at Adobe where I built a streaming architeture for search advertising attribution. I graduated from IIT Kanpur in 2017 with a major in Computer Science and Engineering. In the summer of 2016, I interned at Adobe BigData Experience Lab where I worked on integrating a Topic Model based prediction system within Adobe Illustrator.","tags":null,"title":"Palash Chauhan","type":"authors"},{"authors":[],"categories":[],"content":"In recent years, the proliferation of internet technology has created a surge in machine generated events. These events generally have three parts – timestamp, dimensions and metrics. For example – advertising impression data with dimensions like publisher, gender, country etc and metrics like clicks, price etc. Individually these events contain minimal useful information and are of low value. Earlier, companies were willing to discard this data due to the time and resources required to extract any meaning out of it. But now, big data technology such as Hadoop has contributed much to helping companies convert their low value event streams to high value aggregates for a variety of applications.However, Hadoop opens our eyes to new problems. Hadoop is a great batch-processing and data warehousing system but it does not make any performance guarantees and its performance degrades under concurrent workload. If a product’s use case needs guarantees around query performance and data availability in a highly concurrent environment, Hadoop is certainly not going to meet the needs. Using an RDBMS like MySQL or Postgres is not an option since data might be stored in a star schema which will lead to operational overhead and table-scan operations (global counts) will be very slow. Another option is to pre-compute aggregates for all possible combinations of dimensions and store them in a key-value NoSQL store. However, the time required to pre-compute aggregates will increase exponentially with the number of dimensions. While working in the Infrastructure Team at Adobe Media Optimizer, I had to evaluate other big data systems for a similar use-case.Druid is a distributed column-oriented real-time analytical data store which has a parallelized architecture and is optimized for OLAP workflows.Presto is a distributed SQL query engine designed to query large data sets distributed over one or more heterogeneous data sources.\n","date":1577661694,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577661694,"objectID":"73e32c6f2246f5fa54b4e2f4a99f18ff","permalink":"/project/drupre/","publishdate":"2019-12-29T15:21:34-08:00","relpermalink":"/project/drupre/","section":"project","summary":"In recent years, the proliferation of internet technology has created a surge in machine generated events. These events generally have three parts – timestamp, dimensions and metrics. For example – advertising impression data with dimensions like publisher, gender, country etc and metrics like clicks, price etc. Individually these events contain minimal useful information and are of low value. Earlier, companies were willing to discard this data due to the time and resources required to extract any meaning out of it.","tags":["Systems"],"title":"Benchmarking Druid and Presto","type":"project"},{"authors":[],"categories":[],"content":"Getting people to agree on something is hard. Getting machines connected through an asychronous network to agree on something is harder. RAFT is an easy-to-understand consensus protocol which uses leader election and log replication to achieve consensus. In this project, a cloud-based file storage system was built that can survive server failure, datacenter failure, and network failures. Leader election and log replication from the RAFT Consensus protocol were implemented to maintain a consistent state across servers.\n","date":1577661645,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577661645,"objectID":"52af3793b70ffe0801f99504cc2055c7","permalink":"/project/raft/","publishdate":"2019-12-29T15:20:45-08:00","relpermalink":"/project/raft/","section":"project","summary":"Getting people to agree on something is hard. Getting machines connected through an asychronous network to agree on something is harder. RAFT is an easy-to-understand consensus protocol which uses leader election and log replication to achieve consensus. In this project, a cloud-based file storage system was built that can survive server failure, datacenter failure, and network failures. Leader election and log replication from the RAFT Consensus protocol were implemented to maintain a consistent state across servers.","tags":["Systems"],"title":"SurfStore","type":"project"},{"authors":null,"categories":null,"content":"We performed an in-depth analysis of Virtual Machines, Containers and Serverless using two different CPU-bound and IO-bound applications. We can conclude the following observations from our analysis - (i) Serverless is the most convenient for deploying and maintaining an application closely followed by Containers. The deploy- ment is much slower for Virtual Machines. (ii) For dif- ferent types of workloads, Containers give a better per- formance and scalability compared to Virtual Machines and Serverless. (iii) From a monetary standpoint, Server- less and Containers are cheaper compared to Virtual Ma- chines for smaller workloads, but Containers are the best option for larger workloads. Containers and Virtual ma- chine are more suitable for building services which need to be always online so as to avoid the overhead of load- ing the state in Serverless. Our study and the results have helped us understand the various dimensions of deploy- ing applications in the cloud and we will be able to take an informed decision in the future.\n","date":1575964800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575964800,"objectID":"19342c18d9abfacdff7ffcf93718e78a","permalink":"/project/cloud/","publishdate":"2019-12-10T00:00:00-08:00","relpermalink":"/project/cloud/","section":"project","summary":"A comparative study of Virtual Machines, Containers and Serverless","tags":["Systems"],"title":"Comparing Cloud Models","type":"project"},{"authors":null,"categories":null,"content":"Data dependencies can severely hinder Instruction Level Parallelism (ILP). Data dependencies decrease ILP when long latency instructions flow through the pipeline, and there are not enough independent instructions available to keep the processor busy. Data dependent instructions will stall behind these long latency instructions, potentially creating one or several critical paths through a portion of the program. Load Value Prediction (LVP) is an approach that breaks data dependency on load instructions by predicting the value which is fetched by the instruction. LVP exploits value locality which can be defined as the likelihood of a previously-seen value recurring repeatedly within a storage location. In this project, we explore this notion of value locality, exploit it in order to perform load value prediction and analyze the performance on SPEC2006 Benchmarks.\n","date":1494572400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494572400,"objectID":"97f87058cfba0e5758536deb1bf135a4","permalink":"/project/lvp/","publishdate":"2017-05-12T00:00:00-07:00","relpermalink":"/project/lvp/","section":"project","summary":"Predicting values loaded by machine intructions to aid Instruction Level Parallelism.","tags":["Systems","Computer Architecture"],"title":"Load Value Prediction","type":"project"},{"authors":null,"categories":null,"content":"Recommendation systems are a vital component of the modern web. They help readers effectively navigate otherwise unwieldy archives of information and help websites direct users to items - movies, articles, songs, products that they will like. Collaborative filtering is one of the techniques used for building recommendation systems which involves inferring user preferences and item attributes from data.  In this project, I studied various models for Bayesian Recommender Systems including Poisson Matrix Factorization and its extensions like Hierarchical Poisson Matrix Factorization and Bayesian Non-parametric Poisson Matrix Factorization. I analyzed the effect of latent dimensions on the models and learnt the use of auxiliary variables in variational inference to make the models locally conjugate and facilitate inference. I also evaluated their performance on MovieLens 1M dataset.\n","date":1491807600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1491807600,"objectID":"9d5cb29425d6d2eb407042f3db6f4933","permalink":"/project/poisson/","publishdate":"2017-04-10T00:00:00-07:00","relpermalink":"/project/poisson/","section":"project","summary":"Probabilistic Models for Bayesion Recommender Systems.","tags":["Bayesian ML","Machine Learning"],"title":"Poisson Matrix Factorization","type":"project"},{"authors":["Palash Chauhan","Aditya Gupta","Naman Jain","Sanjeev Biswas"],"categories":null,"content":"","date":1488355200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1488355200,"objectID":"b6d855860e6ff7440e2daaaa9f46a7eb","permalink":"/publication/topicmodels/","publishdate":"2017-03-01T00:00:00-08:00","relpermalink":"/publication/topicmodels/","section":"publication","summary":"Computing application range significantly in their perceived complexity. Some applications are immediately intuitive. Most of the users might be able to leverage the functionality of these applications when first exposed to them without much instruction. Other application, however, may require some amount of prior knowledge, learning or experimentation. Such applications have an abundance of functionality buried in menus, accessible through particular dialogs, initiated by particular keyboard shortcuts and so forth. Adobe Creative Cloud products such as Photoshop and llustrator are prime examples of such applications. Cancellation rates are the highest in the first 30-60 days when users are onboarding indicating difficulty in usage. Conventional techniques of informing the users about the functionality of the application involve enabling users to search for the desired functionality and obtain articles/videos which demonstrate the usage of tools. Providing information this way, however, places the responsibility of obtaining the information on the user itself. This may seem tedious to most users and lead to frustration and finally in cancellation of a subscription.To tackle this issue, we propose a system for contextual prediction of user actions in such applications and a method to surface relevant user guidance in the form of text/images/videos relevant to the context in which the user is working. We make an analogy where a user session is seen as a document and the actions taken by the user in a string format are the words. We then model huge volume of user session data using a Topic Model (LDA: Latent Dirichlet Allocation). The extracted topics, which are nothing but distributions over the set of application tools (or subsets of tools considering the top-k tools), can then be interpreted with the help of an expert. The topics are equivalent to ‘sub-workflows’ in an entire user workflow. For example a user working in Illustrator might work with shapes or with text or with images, all of which could be different topics with different set of tools defining them. We also propose a sliding window approach to detect which topic the current user workflow belongs to. Using this approach we build a topic-transition model which can then be used in a live user session to identify what the user is trying to do and surface relevant guidance information. We show that predicting the next few topics the user might move to is more helpful than just predicting the next few tools the user might use. The entire approach can also be extended to achieve a user-base segmentation and tool analysis.","tags":["Machine Learning","Big Data Analysis","Topic Models","Adobe Creative Cloud"],"title":"Application Tool Recommendation","type":"publication"},{"authors":null,"categories":null,"content":"Malwares remain a large problem as attackers use them to disrupt systems which in turn result in costly after effects. Malware detec- tion is mainly carries out using heuristic and signature-based methods which fails to perform due to continuous evolution of different malware families. In the past decade, Deep Learning has shown very strong promises in order to solve any given problem. This project explores ways to detect malwares by extracting features from binaries and using these to train a deep neural network. Experiments were also carried out using AutoEncoders, LSTM and CNN. We also experimented with raw byte sequence as a feature and the results shows that the neural network is able to learn quite good and extract meaningful information with this raw information.\n","date":1487059200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487059200,"objectID":"6094fa21b49482659defc54918e99ed9","permalink":"/project/malware/","publishdate":"2017-02-14T00:00:00-08:00","relpermalink":"/project/malware/","section":"project","summary":"Predicting whether an execuatable is malware or benign.","tags":["Machine Learning","Systems"],"title":"Malware Detection using Machine Learning","type":"project"},{"authors":null,"categories":null,"content":"Dense captioning is a task which requires a computer vision system to both localize and describe salient regions in images in natural language. The dense captioning task generalizes object detection when the descriptions consist of a single word, and Image Captioning when one predicted region covers the full image. \u0026ldquo;DenseCap: Fully Convolutional Localization Networks for Dense Captioning\u0026rdquo; by Karpathy et. al. proposed a Fully Convolutional Localization Network (FCLN) architecture that processes an image with a single, efficient forward pass, requires no external regions proposals, and can be trained end-to-end with a single round of optimization. The architecture is composed of a Convolutional Network, a novel dense localization layer, and Recurrent Neural Network language model that generates the label sequences. In this project, we tried two things. First was to reproduce the results obtained by the authors to get familiar with the codebase. Second, we replaced the test time Non-Maximal Supression with a Tyrolean Network as described in \u0026ldquo;A convnet for non-maximum suppression\u0026rdquo; by Hosang et. al. We were able to obtain a slight increase in the Mean Average Precision of DenseCap compared to our run of the original code.\n","date":1481443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1481443200,"objectID":"a0ebbb1ca4a28ae0299aaa4271dc9985","permalink":"/project/dense/","publishdate":"2016-12-11T00:00:00-08:00","relpermalink":"/project/dense/","section":"project","summary":"Teaching a computer vision system to localize and describe salient regions in images in natural language","tags":["Deep Learning","Machine Learning"],"title":"Dense Image Captioning","type":"project"},{"authors":null,"categories":null,"content":"As the problem of information overload grows, and as the amount of data increases, the interest in automatic summarization is also increasing. There has been a lot of reserach work in the area of text summarization. Summarization can be achieved either by extracting elements from the input (Extractive) or by understanding the content of the input and using language generation techniques (Abstractive). Both these methods do not perform well on long documents like research papers. Through this project, we proposed an approach for automatic summarization which is a combination of both these methods. Salient sentences are first extracted from the long document which are then fed to a sequence-to-sequence RNN. We experimented with a number of ways to extract salient elements like LDA, LSA and TextRank and fed the best extraction to an RNN to generate an enhanced summary. We evaluated the generated summaries using the ROUGE metric on a dataset containing research papers from NIPS 2015.\n","date":1481356800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1481356800,"objectID":"1331628aa1410d6f994721adcb8ac315","permalink":"/project/nlp/","publishdate":"2016-12-10T00:00:00-08:00","relpermalink":"/project/nlp/","section":"project","summary":"Text Summarization for Long Documents like research papers.","tags":["Deep Learning","Machine Learning"],"title":"Automatic Abstract Generation","type":"project"}]